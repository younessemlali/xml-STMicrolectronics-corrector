import streamlit as st
import json
import xml.etree.ElementTree as ET
from pathlib import Path
import tempfile
from datetime import datetime
from xml_enricher import XMLEnricher
import pandas as pd
import io

# Configuration de la page
st.set_page_config(
    page_title="PIXID XML Enricher",
    page_icon="üîß",
    layout="wide"
)

# CSS personnalis√©
st.markdown("""
<style>
    .success-box {
        padding: 20px;
        background-color: #d4edda;
        border: 1px solid #c3e6cb;
        border-radius: 5px;
        margin: 10px 0;
    }
    .info-box {
        padding: 15px;
        background-color: #d1ecf1;
        border: 1px solid #bee5eb;
        border-radius: 5px;
        margin: 10px 0;
    }
    .warning-box {
        padding: 15px;
        background-color: #fff3cd;
        border: 1px solid #ffeeba;
        border-radius: 5px;
        margin: 10px 0;
    }
</style>
""", unsafe_allow_html=True)

# Titre principal
st.title("üîß PIXID XML Enricher - STMicroelectronics")
st.markdown("Enrichissez automatiquement vos fichiers XML avec les donn√©es PIXID extraites des emails")

# Initialisation de la session
if 'enriched_xml' not in st.session_state:
    st.session_state.enriched_xml = None
if 'stats' not in st.session_state:
    st.session_state.stats = None

# Sidebar - Navigation
st.sidebar.title("üìã Navigation")
page = st.sidebar.radio(
    "Choisir une page",
    ["üîß Enrichissement XML", "üîç Recherche commande", "üìä Statistiques", "‚ÑπÔ∏è Documentation"]
)

# Charger automatiquement le fichier JSON des commandes
st.sidebar.markdown("---")
st.sidebar.subheader("üìÅ Base de donn√©es")

# Initialiser l'enrichisseur automatiquement au d√©marrage
if 'enricher' not in st.session_state:
    try:
        # Essayer d'abord data/commandes_stm.json
        json_path = 'data/commandes_stm.json'
        if not Path(json_path).exists():
            # Sinon chercher √† la racine
            json_path = 'commandes_stm.json'
        
        st.session_state.enricher = XMLEnricher(json_path)
        st.sidebar.success(f"‚úÖ {len(st.session_state.enricher.commandes_data)} commandes charg√©es")
    except FileNotFoundError:
        st.session_state.enricher = None
        st.sidebar.error("‚ùå Fichier commandes_stm.json introuvable")
        st.sidebar.info("üí° Placez commandes_stm.json dans /data/ ou √† la racine")
    except Exception as e:
        st.session_state.enricher = None
        st.sidebar.error(f"‚ùå Erreur: {e}")
else:
    # L'enrichisseur est d√©j√† charg√©
    if st.session_state.enricher:
        st.sidebar.info(f"‚úÖ {len(st.session_state.enricher.commandes_data)} commandes disponibles")

# ============= PAGE 1: ENRICHISSEMENT XML =============
if page == "üîß Enrichissement XML":
    st.header("üîß Enrichissement XML Multi-Contrats")
    
    if not st.session_state.enricher:
        st.error("‚ö†Ô∏è Base de donn√©es non disponible")
        st.info("""
        **Fichier manquant: commandes_stm.json**
        
        Ce fichier est g√©n√©r√© automatiquement par le syst√®me Google Apps Script.
        Placez-le dans le dossier `/data/` ou √† la racine du projet.
        """)
        st.stop()
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.subheader("üì§ Upload du fichier XML")
        xml_file = st.file_uploader(
            "S√©lectionnez votre fichier XML contenant un ou plusieurs contrats",
            type=['xml'],
            help="Le fichier XML peut contenir plusieurs contrats. Chaque contrat avec un OrderId valide sera enrichi."
        )
    
    with col2:
        st.subheader("üìä Informations")
        total_commandes = len(st.session_state.enricher.commandes_data)
        st.metric("Commandes disponibles", total_commandes)
    
    if xml_file:
        # Sauvegarder temporairement le XML
        with tempfile.NamedTemporaryFile(delete=False, suffix='.xml', mode='wb') as tmp_xml:
            tmp_xml.write(xml_file.getvalue())
            tmp_xml_path = tmp_xml.name
        
        # Afficher un aper√ßu
        st.subheader("üîç Analyse du fichier XML")
        
        # Trouver tous les num√©ros de commande
        orders = st.session_state.enricher.find_all_order_ids_in_xml(tmp_xml_path)
        
        if orders:
            st.success(f"‚úÖ **{len(orders)} contrat(s) d√©tect√©(s)** dans le fichier XML")
            
            # Afficher les contrats d√©tect√©s
            with st.expander("üìã Liste des contrats d√©tect√©s", expanded=True):
                orders_with_data = []
                orders_without_data = []
                
                for order_info in orders:
                    order_id = order_info['order_id']
                    commande = st.session_state.enricher.get_commande_info(order_id)
                    
                    if commande:
                        orders_with_data.append({
                            'OrderId': order_id,
                            'Agence': commande.get('code_agence', 'N/A'),
                            'Unit√©': commande.get('code_unite', 'N/A'),
                            'Statut': commande.get('statut', 'N/A'),
                            'Classification': commande.get('classification_interimaire', 'N/A'),
                            'Donn√©es': '‚úÖ Disponibles'
                        })
                    else:
                        orders_without_data.append({
                            'OrderId': order_id,
                            'Agence': '-',
                            'Unit√©': '-',
                            'Statut': '-',
                            'Classification': '-',
                            'Donn√©es': '‚ùå Non trouv√©es'
                        })
                
                # Afficher les r√©sultats
                col1, col2 = st.columns(2)
                
                with col1:
                    st.metric("‚úÖ Contrats enrichissables", len(orders_with_data))
                
                with col2:
                    st.metric("‚ùå Contrats sans donn√©es", len(orders_without_data))
                
                # Tableau r√©capitulatif
                all_orders = orders_with_data + orders_without_data
                if all_orders:
                    df = pd.DataFrame(all_orders)
                    st.dataframe(df, use_container_width=True, hide_index=True)
            
            st.markdown("---")
            
            # Bouton d'enrichissement
            if len(orders_with_data) > 0:
                if st.button("üöÄ Enrichir le fichier XML", type="primary", use_container_width=True):
                    # Cr√©er un placeholder pour la progression
                    progress_bar = st.progress(0)
                    status_text = st.empty()
                    
                    # Cr√©er le fichier de sortie
                    output_path = tempfile.NamedTemporaryFile(delete=False, suffix='_enrichi.xml').name
                    
                    # Fonction callback pour la progression
                    def update_progress(current, total):
                        progress = current / total
                        progress_bar.progress(progress)
                        status_text.text(f"Enrichissement: {current}/{total} contrats trait√©s...")
                    
                    # Enrichir
                    success, message, stats = st.session_state.enricher.enrich_xml(
                        tmp_xml_path,
                        output_path,
                        progress_callback=update_progress
                    )
                    
                    # Nettoyer la barre de progression
                    progress_bar.empty()
                    status_text.empty()
                    
                    if success:
                        # Lire le fichier enrichi
                        with open(output_path, 'rb') as f:
                            st.session_state.enriched_xml = f.read()
                        
                        st.session_state.stats = stats
                        
                        st.balloons()
                        st.success("‚úÖ Fichier XML enrichi avec succ√®s!")
                        
                        # Afficher les statistiques
                        col1, col2, col3 = st.columns(3)
                        
                        with col1:
                            st.metric("üì¶ Total contrats", stats['total'])
                        
                        with col2:
                            st.metric("‚úÖ Enrichis", stats['enrichis'], 
                                    delta=f"{(stats['enrichis']/stats['total']*100):.0f}%")
                        
                        with col3:
                            st.metric("‚ùå Non trouv√©s", stats['non_trouves'])
                        
                        # D√©tails des modifications
                        with st.expander("üìã D√©tails des modifications par contrat"):
                            details_df = pd.DataFrame(stats['details'])
                            st.dataframe(details_df, use_container_width=True, hide_index=True)
                    else:
                        st.error(f"‚ùå {message}")
            else:
                st.warning("‚ö†Ô∏è Aucun contrat ne peut √™tre enrichi (aucune donn√©e disponible)")
            
            # T√©l√©chargement si enrichissement effectu√©
            if st.session_state.enriched_xml and st.session_state.stats:
                st.markdown("---")
                st.subheader("üì• T√©l√©charger les r√©sultats")
                
                col1, col2 = st.columns(2)
                
                with col1:
                    # G√©n√©rer le nom du fichier
                    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
                    xml_name = f"enrichi_{st.session_state.stats['enrichis']}contrats_{timestamp}.xml"
                    
                    st.download_button(
                        label="‚¨áÔ∏è T√©l√©charger le XML enrichi",
                        data=st.session_state.enriched_xml,
                        file_name=xml_name,
                        mime="application/xml",
                        use_container_width=True
                    )
                
                with col2:
                    # Cr√©er un rapport CSV
                    if st.session_state.stats and 'details' in st.session_state.stats:
                        csv_buffer = io.StringIO()
                        df_report = pd.DataFrame(st.session_state.stats['details'])
                        df_report.to_csv(csv_buffer, index=False)
                        csv_data = csv_buffer.getvalue()
                        
                        csv_name = f"rapport_{timestamp}.csv"
                        
                        st.download_button(
                            label="üìä T√©l√©charger le rapport CSV",
                            data=csv_data,
                            file_name=csv_name,
                            mime="text/csv",
                            use_container_width=True
                        )
        else:
            st.error("‚ùå Aucun num√©ro de commande d√©tect√© dans le XML")
            st.info("""
            Le num√©ro de commande doit √™tre au format:
            - CR000xxx (Crolles)
            - CD000xxx (Crolles Direct)
            - RT000xxx (Rousset)
            """)

# ============= PAGE 2: RECHERCHE =============
elif page == "üîç Recherche commande":
    st.header("üîç Recherche de commande")
    
    if not st.session_state.enricher:
        st.warning("‚ö†Ô∏è Base de donn√©es non disponible")
        st.stop()
    
    # Champ de recherche
    query = st.text_input(
        "üîé Rechercher une commande",
        placeholder="Num√©ro de commande, code agence, code unit√©...",
        help="Ex: CR000722, STC, CR8043..."
    )
    
    if query:
        results = st.session_state.enricher.search_commandes(query)
        
        st.subheader(f"üìä R√©sultats ({len(results)} trouv√©{'s' if len(results) > 1 else ''})")
        
        if results:
            for i, cmd in enumerate(results[:20], 1):  # Limiter √† 20 r√©sultats
                with st.expander(f"üìã {cmd['numero_commande']} - {cmd.get('personne_absente', 'N/A')[:50]}"):
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.markdown(f"**üè¢ Agence:** {cmd.get('code_agence', 'N/A')}")
                        st.markdown(f"**üîß Unit√©:** {cmd.get('code_unite', 'N/A')}")
                        st.markdown(f"**üëî Statut:** {cmd.get('statut', 'N/A')}")
                    
                    with col2:
                        st.markdown(f"**üéØ Classification:** {cmd.get('classification_interimaire', 'N/A')}")
                        st.markdown(f"**üë§ Personne:** {cmd.get('personne_absente', 'N/A')[:100]}")
                        
                        date_str = cmd.get('date_extraction', 'N/A')
                        if date_str != 'N/A':
                            try:
                                date_obj = datetime.fromisoformat(date_str.replace('Z', '+00:00'))
                                st.markdown(f"**üìÖ Date:** {date_obj.strftime('%d/%m/%Y %H:%M')}")
                            except:
                                st.markdown(f"**üìÖ Date:** {date_str}")
            
            if len(results) > 20:
                st.info(f"üí° {len(results) - 20} r√©sultats suppl√©mentaires non affich√©s")
        else:
            st.info("Aucun r√©sultat trouv√©")

# ============= PAGE 3: STATISTIQUES =============
elif page == "üìä Statistiques":
    st.header("üìä Statistiques des commandes")
    
    if not st.session_state.enricher:
        st.warning("‚ö†Ô∏è Base de donn√©es non disponible")
        st.stop()
    
    commandes = list(st.session_state.enricher.commandes_data.values())
    
    # M√©triques globales
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("Total commandes", len(commandes))
    
    with col2:
        agences = set(c.get('code_agence') for c in commandes if c.get('code_agence'))
        st.metric("Agences", len(agences))
    
    with col3:
        unites = set(c.get('code_unite') for c in commandes if c.get('code_unite'))
        st.metric("Unit√©s", len(unites))
    
    with col4:
        statuts = set(c.get('statut') for c in commandes if c.get('statut'))
        st.metric("Statuts", len(statuts))
    
    st.markdown("---")
    
    # Statistiques par type
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üìä R√©partition par agence")
        agence_count = {}
        for cmd in commandes:
            agence = cmd.get('code_agence', 'N/A')
            agence_count[agence] = agence_count.get(agence, 0) + 1
        
        for agence, count in sorted(agence_count.items(), key=lambda x: -x[1])[:10]:
            st.metric(agence, count)
    
    with col2:
        st.subheader("üìä R√©partition par statut")
        statut_count = {}
        for cmd in commandes:
            statut = cmd.get('statut', 'N/A')
            statut_short = statut.split('-')[0].strip() if statut and '-' in statut else statut
            statut_count[statut_short] = statut_count.get(statut_short, 0) + 1
        
        for statut, count in sorted(statut_count.items(), key=lambda x: -x[1])[:10]:
            st.metric(statut, count)

# ============= PAGE 4: DOCUMENTATION =============
elif page == "‚ÑπÔ∏è Documentation":
    st.header("‚ÑπÔ∏è Documentation")
    
    st.markdown("""
    ## üéØ Objectif
    
    Cette application permet d'enrichir automatiquement vos fichiers XML (pouvant contenir plusieurs contrats)
    avec les donn√©es extraites des emails de confirmation de commande PIXID de STMicroelectronics.
    
    ## üîß Fonctionnement
    
    ### 1. Chargement des donn√©es
    - Le fichier `commandes_stm.json` est charg√© automatiquement au d√©marrage
    - Ce fichier contient toutes les commandes extraites des emails
    
    ### 2. Enrichissement XML Multi-Contrats
    - Uploadez votre fichier XML (peut contenir plusieurs contrats)
    - L'application d√©tecte **TOUS** les num√©ros de commande dans le fichier
    - Pour chaque contrat trouv√© dans la base, les balises suivantes sont enrichies:
      - `<Code>` dans `<PositionStatus>` ‚Üí Statut (ex: "OP", "VAC")
      - `<PositionCoefficient>` ‚Üí Classification (ex: "A2", "B1")
    - Les contrats non trouv√©s dans la base restent inchang√©s
    
    ### 3. Suivi et Rapport
    - **Barre de progression** pendant le traitement
    - **Statistiques d√©taill√©es** : nombre total, enrichis, non trouv√©s
    - **Rapport CSV t√©l√©chargeable** avec le d√©tail de chaque contrat
    
    ### 4. T√©l√©chargement
    - T√©l√©chargez votre fichier XML enrichi (tous les contrats dans un seul fichier)
    - T√©l√©chargez le rapport CSV pour audit/suivi
    - Le nom inclut le nombre de contrats enrichis et un timestamp
    
    ## üìã Structure des donn√©es
    
    ### Balises enrichies
    
    ```xml
    <PositionCharacteristics>
      <PositionTitle>Agent de fabrication (F/H)</PositionTitle>
      <PositionStatus>
        <Code>OP</Code>                    <!-- ‚úÖ ENRICHI -->
        <Description>Op√©rateur</Description>
      </PositionStatus>
      <PositionLevel>Direct</PositionLevel>
      <PositionCoefficient>A2</PositionCoefficient>  <!-- ‚úÖ ENRICHI -->
    </PositionCharacteristics>
    ```
    
    ### Formats de num√©ro de commande support√©s
    - **CR000xxx**: Commandes Crolles
    - **CD000xxx**: Commandes Crolles Direct  
    - **RT000xxx**: Commandes Rousset
    
    ## ‚ö†Ô∏è Important
    
    - Le fichier `commandes_stm.json` doit √™tre √† jour
    - L'encodage **ISO-8859-1** est pr√©serv√©
    - **Aucun namespace** n'est ajout√© (pas de ns0:)
    - Les contrats sans donn√©es restent intacts
    - V√©rifiez toujours le rapport CSV apr√®s enrichissement
    
    ## üÜò Support
    
    En cas de probl√®me:
    1. V√©rifiez que le fichier JSON est bien charg√©
    2. V√©rifiez que les num√©ros de commande sont pr√©sents dans le XML
    3. Consultez le rapport CSV pour voir quels contrats ont √©t√© enrichis
    4. Les fichiers XML de grande taille (15 000+ lignes) sont support√©s
    
    ## üìû Contact
    
    Pour toute question ou support technique, contactez l'√©quipe PIXID Automation.
    """)

# Footer
st.sidebar.markdown("---")
st.sidebar.markdown("**PIXID Automation Platform**")
st.sidebar.caption("v2.1 - Multi-Contrats - STMicroelectronics")
