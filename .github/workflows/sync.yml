name: PIXID Drive to Sheets Sync

on:
  schedule:
    # Ex√©cution toutes les 15 minutes
    - cron: '*/15 * * * *'
  
  # Permettre l'ex√©cution manuelle
  workflow_dispatch:
    inputs:
      verbose:
        description: 'Activer le mode verbose'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'
      force_full_sync:
        description: 'Forcer la resynchronisation compl√®te (ignore l\'historique)'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

# Permissions pour les actions
permissions:
  contents: read
  issues: write  # Pour cr√©er des issues en cas d'erreur

jobs:
  sync:
    name: Synchronisation PIXID
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: üîÑ Checkout du code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Pour avoir l'historique complet
    
    - name: üêç Configuration Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: 'requirements.txt'
    
    - name: üì¶ Installation des d√©pendances
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
        # Cr√©er les dossiers n√©cessaires
        mkdir -p logs
        
    - name: üîë Configuration des credentials
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
      run: |
        # V√©rifier que les credentials sont pr√©sents
        if [ -z "$GOOGLE_CREDENTIALS" ]; then
          echo "‚ùå GOOGLE_CREDENTIALS secret non configur√©!"
          exit 1
        fi
        echo "‚úÖ Credentials Google configur√©s"
    
    - name: üóÇÔ∏è Restauration de l'√©tat pr√©c√©dent
      uses: actions/cache@v4
      with:
        path: |
          sync_state.json
          monitoring_data.json
        key: sync-state-${{ github.sha }}
        restore-keys: |
          sync-state-
    
    - name: üöÄ Ex√©cution de la synchronisation
      id: sync
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        PYTHONUNBUFFERED: '1'  # Pour voir les logs en temps r√©el
      run: |
        # D√©finir les options
        VERBOSE_FLAG=""
        if [ "${{ github.event.inputs.verbose }}" = "true" ]; then
          VERBOSE_FLAG="--verbose"
        fi
        
        # Forcer la resync compl√®te si demand√©
        if [ "${{ github.event.inputs.force_full_sync }}" = "true" ]; then
          echo "üîÑ Suppression de l'√©tat pour forcer la resynchronisation compl√®te"
          rm -f sync_state.json
        fi
        
        # Ex√©cuter le script
        echo "üìä D√©marrage de la synchronisation PIXID..."
        python sync_drive_to_sheet.py $VERBOSE_FLAG || EXIT_CODE=$?
        
        # Capturer le code de sortie
        echo "exit_code=${EXIT_CODE:-0}" >> $GITHUB_OUTPUT
        
        # Afficher les statistiques
        if [ -f monitoring_data.json ]; then
          echo "üìà Statistiques de la derni√®re ex√©cution:"
          python -c "
import json
with open('monitoring_data.json', 'r') as f:
    data = json.load(f)
    if data.get('history'):
        last = data['history'][-1]
        print(f\"  - Fichiers trouv√©s: {last.get('files_found', 0)}\")
        print(f\"  - Fichiers trait√©s: {last.get('files_processed', 0)}\")
        print(f\"  - Lignes ajout√©es: {last.get('rows_added', 0)}\")
        print(f\"  - Dur√©e: {last.get('duration_seconds', 0):.1f}s\")
        print(f\"  - Statut: {last.get('status', 'unknown')}\")
          "
        fi
        
        exit ${EXIT_CODE:-0}
    
    - name: üíæ Sauvegarde des artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: sync-artifacts-${{ github.run_number }}
        path: |
          logs/
          sync_state.json
          monitoring_data.json
        retention-days: 7
    
    - name: üìä G√©n√©ration du rapport de monitoring
      if: always()
      run: |
        # Cr√©er un rapport markdown
        cat > sync_report.md << 'EOF'
        # üìä Rapport de Synchronisation PIXID
        
        **Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')
        **Run:** #${{ github.run_number }}
        **D√©clencheur:** ${{ github.event_name }}
        
        ## R√©sultats
        EOF
        
        if [ -f monitoring_data.json ]; then
          python -c "
import json
with open('monitoring_data.json', 'r') as f:
    data = json.load(f)
    if data.get('history'):
        last = data['history'][-1]
        
        # Status emoji
        status = last.get('status', 'unknown')
        emoji = '‚úÖ' if status == 'success' else '‚ö†Ô∏è' if status == 'partial' else '‚ùå'
        
        print(f\"\")
        print(f\"### {emoji} Statut: {status.upper()}\")
        print(f\"\")
        print(f\"| M√©trique | Valeur |\")
        print(f\"|----------|--------|\")
        print(f\"| Fichiers trouv√©s | {last.get('files_found', 0)} |\")
        print(f\"| Fichiers trait√©s | {last.get('files_processed', 0)} |\")
        print(f\"| Fichiers en erreur | {last.get('files_error', 0)} |\")
        print(f\"| Lignes ajout√©es | {last.get('rows_added', 0)} |\")
        print(f\"| Dur√©e | {last.get('duration_seconds', 0):.1f}s |\")
        print(f\"\")
        
        # Erreurs
        errors = last.get('errors', [])
        if errors:
            print(f\"### ‚ö†Ô∏è Erreurs rencontr√©es\")
            print(f\"\")
            for err in errors[:5]:  # Max 5 erreurs
                print(f\"- {err}\")
            if len(errors) > 5:
                print(f\"- ... et {len(errors) - 5} autres erreurs\")
          " >> sync_report.md
        fi
        
        # Afficher le rapport
        cat sync_report.md
    
    - name: üíæ Upload du rapport
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: sync-report-${{ github.run_number }}
        path: sync_report.md
        retention-days: 30
    
    - name: üö® Cr√©ation d'issue en cas d'√©chec
      if: failure() && github.event_name == 'schedule'
      uses: actions/github-script@v7
      with:
        script: |
          const runUrl = `${context.payload.repository.html_url}/actions/runs/${context.runId}`;
          
          // V√©rifier s'il y a d√©j√† une issue ouverte
          const issues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: ['sync-failure', 'automated']
          });
          
          // Ne pas cr√©er de doublon
          if (issues.data.length > 0) {
            console.log('Une issue est d√©j√† ouverte pour les √©checs de sync');
            return;
          }
          
          // Cr√©er une nouvelle issue
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `üö® √âchec de synchronisation PIXID - Run #${context.runNumber}`,
            body: `## √âchec de la synchronisation automatique
            
            La synchronisation PIXID a √©chou√© lors de l'ex√©cution planifi√©e.
            
            **D√©tails:**
            - üìÖ Date: ${new Date().toISOString()}
            - üî¢ Run: #${context.runNumber}
            - üîó [Voir les logs](${runUrl})
            
            **Actions sugg√©r√©es:**
            1. V√©rifier les logs de l'ex√©cution
            2. V√©rifier la validit√© des credentials Google
            3. V√©rifier l'acc√®s au dossier Drive et au Sheet
            4. Relancer manuellement si n√©cessaire
            
            cc @${context.actor}`,
            labels: ['sync-failure', 'automated', 'bug']
          });
    
    - name: üìà Mise √† jour du badge de statut
      if: always()
      run: |
        # Cr√©er un fichier pour le badge (peut √™tre utilis√© par shields.io)
        mkdir -p .github/badges
        
        STATUS="${{ steps.sync.outputs.exit_code }}"
        if [ "$STATUS" = "0" ]; then
          echo '{"schemaVersion":1,"label":"sync","message":"passing","color":"success"}' > .github/badges/sync.json
        else
          echo '{"schemaVersion":1,"label":"sync","message":"failing","color":"critical"}' > .github/badges/sync.json
        fi
    
    - name: üßπ Nettoyage des anciennes ex√©cutions
      if: always()
      uses: Mattraks/delete-workflow-runs@v2
      with:
        token: ${{ github.token }}
        repository: ${{ github.repository }}
        retain_days: 7
        keep_minimum_runs: 20
        delete_workflow_pattern: "PIXID Drive to Sheets Sync"
        delete_run_by_conclusion_pattern: "cancelled,skipped"

  notify-success:
    name: Notification de succ√®s
    needs: sync
    if: success() && github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    
    steps:
    - name: ‚úÖ Notification de succ√®s
      run: |
        echo "‚úÖ Synchronisation PIXID termin√©e avec succ√®s!"
        echo "Consultez les artifacts pour plus de d√©tails."
